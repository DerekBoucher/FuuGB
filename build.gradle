/*
    Gradle BuildScript for FuuGBemu
    C++ Gameboy (DMG) Emulator
    Author: Derek Boucher
*/

/*
    Packages
*/
import org.gradle.internal.os.OperatingSystem

/*
    Required Plugins For FuuGBemu
*/
plugins {
    id 'cpp-application'
    id 'cpp-unit-test'
    id 'objective-cpp'
}

/*
    Global Variables
 */
def sdl2Lib

/*
    Determine Platform Specific Library Paths
 */
if (OperatingSystem.current().isWindows()) {
    sdl2Lib = file(OperatingSystem.current().getStaticLibraryName('lib/SDL2/Windows/x64/SDL2'))
}
if (OperatingSystem.current().isMacOsX()) {
    sdl2Lib = file(OperatingSystem.current().getStaticLibraryName('lib/SDL2/MacOsX/SDL2'))
}

/*
    Model Block:
        This block defines the platform, architecture, compiler and linker arguments,
        the platform specific source sets and binary types.
*/
model {
    repositories {
        libs(PrebuiltLibraries) {
            SDL2 {
                headers.srcDir 'lib/SDL2/MacOsX/include'
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = sdl2Lib
                }
            }
        }
    }

    components {
        FuuGBemu(NativeExecutableSpec) {
            sources {
                if (OperatingSystem.current().isMacOsX()) {
                    objcpp {
                        source {
                            srcDirs "src/main/cpp", "src/main/MacOSX"
                            include "**/*.mm", "**/*.m", "**/*.cpp"
                        }
                        exportedHeaders {
                            srcDirs "src/main/headers"
                        }
                        lib library: "SDL2", linkage: "static"
                    }
                }
                if (OperatingSystem.current().isWindows()) {
                    cpp {
                        source {
                            srcDirs "src/main/cpp", "src/main/Windows"
                            include "**/*.cpp"
                        }
                        exportedHeaders {
                            srcDirs "src/main/headers"
                        }
                    }
                }
            }
            binaries.all {
                if(OperatingSystem.current().isMacOsX()) {
                    objcppCompiler.define "FUUGB_SYSTEM_MACOS"
                    if (buildType == buildTypes.debug) {
                        objcppCompiler.define "FUUGB_DEBUG"
                        objcppCompiler.args '-g','-Wall','-std=c++11','-stdlib=libc++'
                    }
                    linker.args "-framework", "Cocoa"
                    linker.args "-framework", "AppKit"
                    linker.args "-framework", "AudioToolbox"
                    linker.args "-framework", "CoreAudio"
                    linker.args "-framework", "CoreVideo"
                    linker.args "-framework", "ForceFeedback"
                    linker.args "-framework", "IOKit"
                    linker.args "-framework", "Carbon"
                    linker.args "-framework", "Metal"
                    linker.args "-liconv"
                }
            }
        }
    }
}