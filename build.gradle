/*
    Gradle BuildScript for FuuGBemu
    C++ Gameboy (DMG) Emulator
    Author: Derek Boucher
*/

/*
    Packages
*/
import org.gradle.internal.os.OperatingSystem


/*
    Required Plugins For FuuGBemu
*/
plugins {
    id 'cpp-application'
}

/*
    Global Variables
 */
def sdl2Lib
def sdl2Include
def sdl2Dll


/*
    Determine Platform Specific Library Paths
 */
if (OperatingSystem.current().isWindows()) {
    sdl2Lib = file(OperatingSystem.current().getStaticLibraryName('lib/SDL2/Windows/x64/SDL2'))
    sdl2Dll = file(OperatingSystem.current().getSharedLibraryName('lib/SDL2/Windows/x64/SDL2'))
    sdl2Include = 'lib/SDL2/Windows/include'
}
if (OperatingSystem.current().isMacOsX()) {
    sdl2Lib = file(OperatingSystem.current().getSharedLibraryName('lib/SDL2/MacOsX/SDL2'))
    sdl2Include = 'lib/SDL2/MacOsX/include'
}

/* 
    Repositories Block:
        Defines the 3rd party libraries that this project links against.
        Namely, the SDL2 library for graphical needs.
*/
model {

    repositories {
        libs(PrebuiltLibraries) {
            SDL2 {
                headers.srcDirs sdl2Include
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = sdl2Lib
                }
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = sdl2Lib
                }
            }
        }
    }
}

/*
    Application Block:
        This block defines the platform, architecture, compiler and linker arguments,
        the platform specific source sets and binary types.
*/
application {
    
    /*
        Target Machines
    */
    targetMachines = [
        machines.windows.x86_64,
        machines.macOS.x86_64,
        machines.linux.x86_64
    ]

    /*
        Source Sets
    */
    source {
        
        /*
            Common
        */
        from "src/main/cpp"

        /*
            Windows
        */
        if(OperatingSystem.current().isWindows()) {
            from "src/main/Windows"
        }

        /*
            MacOSX
        */
        if (OperatingSystem.current().isMacOsX()) {
            from "src/main/MacOSX"
        }

        /*
            Linux
        */
        //TBD
    }

    /*
        Configure Build
    */
    binaries.whenElementFinalized { binary ->

        /*
            Configure Compiler
        */
        binary.compileTask.get().configure {
            includes.from(sdl2Include)

            compilerArgs.addAll toolChain.map { toolChain ->
                if (toolChain in VisualCpp) {
                    return [
                        '/MTd',
                        '/DFUUGB_SYSTEM_WINDOWS',
                        '/DFUUGB_DEBUG',
                        '/DUNICODE'
                    ]
                } else {
                    return [
                        '-x',
                        'objective-c++',
                        '-Wall',
                        '-std=c++11',
                        '-DFUUGB_SYSTEM_MACOS',
                        '-DFUUGB_DEBUG'
                    ]
                }
            }
        }

        /*
            Configure Linker
        */
        binary.linkTask.get().configure {
            libs.from(sdl2Lib)
            linkerArgs.addAll toolChain.map { toolChain ->
                if (toolChain in VisualCpp) {
                    return [
                        'comdlg32.lib',
                        'user32.lib',
                        '/SUBSYSTEM:CONSOLE'
                    ]
                } else {
                    return [
                        '-framework',
                        'Cocoa',
                        '-framework',
                        'AppKit'
                    ]
                }
            }
        }
    }

    /*
        Post Build Commands
    */
    build {
        doLast {
            if (OperatingSystem.current().isWindows()) {
                copy {
                    from 'lib/SDL2/Windows/x64/SDL2.dll'
                    into 'build/exe/main/debug/windows'
                }
                copy {
                    from 'lib/bootrom/DMG_ROM.bin'
                    into 'build/exe/main/debug/windows'
                }
                copy {
                    from 'lib/SDL2/Windows/x64/SDL2.dll'
                    into 'build/test/windows'
                }
            }
        }
    }
}