/*
    Gradle BuildScript for FuuGBemu
    C++ Gameboy (DMG) Emulator
    Author: Derek Boucher
*/

/*
    Packages
*/
import org.gradle.internal.os.OperatingSystem


/*
    Required Plugins For FuuGBemu
*/
plugins {
    id 'cpp'
    id 'objective-cpp'
    id 'cpp-unit-test'
}

/*
    Global Variables
 */
def sdl2Lib
def sdl2Include
def sdl2Dll

/*
    Determine Platform Specific Library Paths
 */
if (OperatingSystem.current().isWindows()) {
    sdl2Lib = file(OperatingSystem.current().getStaticLibraryName('lib/SDL2/Windows/x64/SDL2'))
    sdl2Dll = file(OperatingSystem.current().getSharedLibraryName('lib/SDL2/Windows/x64/SDL2'))
    sdl2Include = 'lib/SDL2/Windows/include'
}
if (OperatingSystem.current().isMacOsX()) {
    sdl2Lib = file(OperatingSystem.current().getSharedLibraryName('lib/SDL2/MacOsX/SDL2'))
    sdl2Include = 'lib/SDL2/MacOsX/include'
}

/*
    Model Block:
        This block defines the platform, architecture, compiler and linker arguments,
        the platform specific source sets and binary types.
*/
model {
    platforms {
        windows_x64 {
            architecture "x86_64"
            operatingSystem "windows"
        }
        macosx_x64 {
            architecture "x86_64"
            operatingSystem "macosx"
        }
    }
    repositories {
        libs(PrebuiltLibraries) {
            SDL2 {
                headers.srcDirs sdl2Include
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = sdl2Lib
                }
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = sdl2Lib
                }
            }
        }
    }
    components {
        FuuGBemu(NativeExecutableSpec) {
            sources {
                if (OperatingSystem.current().isMacOsX()) {
                    targetPlatform "macosx_x64"
                    objcpp {
                        source {
                            srcDirs "src/main/cpp", "src/main/MacOSX"
                            include "**/*.mm", "**/*.m", "**/*.cpp"
                        }
                        exportedHeaders {
                            srcDirs "src/main/headers"
                        }
                        lib library: "SDL2", linkage: "shared"
                    }
                }
                if (OperatingSystem.current().isWindows()) {
                    targetPlatform "windows_x64"
                    cpp {
                        source {
                            srcDirs "src/main/cpp", "src/main/Windows"
                            include "**/*.cpp"
                        }
                        exportedHeaders {
                            srcDirs "src/main/headers"
                        }
                        lib library: "SDL2", linkage: "shared"
                    }
                }
            }
            binaries.all {
                if(OperatingSystem.current().isMacOsX()) {
                    objcppCompiler.define "FUUGB_SYSTEM_MACOS"
                    if (buildType == buildTypes.debug) {
                        objcppCompiler.define "FUUGB_DEBUG"
                        objcppCompiler.args '-g','-Wall','-std=c++11','-stdlib=libc++'
                    }
                    linker.args "-framework", "Cocoa"
                    linker.args "-framework", "AppKit"
                }
                if(OperatingSystem.current().isWindows()) {
                    cppCompiler.define "FUUGB_SYSTEM_WINDOWS"
                    cppCompiler.define "UNICODE"
                    if (buildType == buildTypes.debug) {
                        cppCompiler.define "FUUGB_DEBUG"
                        linker.args "/DEBUG"
                    }
                    cppCompiler.args "/FS","/Zi","/MTd", "/Ot"
                    linker.args "comdlg32.lib"
                    linker.args "user32.lib"
                    linker.args "/SUBSYSTEM:CONSOLE"
                }
            }
            compileTestCpp {
                sources {
                    cpp {
                        source {
                            srcDirs "src/test/cpp", "src/main/cpp"
                            include "**/*.cpp"
                        }
                        exportedHeaders {
                            srcDirs "src/main/headers", "src/test/headers"
                        }
                        lib library: "SDL2", linkage: "shared"
                    }
                }
                source {
                    "src/test/cpp/*.cpp"
                    "src/main/cpp/*.cpp"
                }
                includes {
                    "src/main/headers" 
                    "src/test/headers"
                }
            }
        }
    }
    tasks {
        buildemu(Task) {
            dependsOn {
                build
            }
            doLast {
                copy {
                    from 'lib/bootrom/DMG_ROM.bin'
                    into 'build/exe/fuuGBemu'
                }
                if (OperatingSystem.current().isMacOsX()) {
                    copy {
                        from 'lib/SDL2/MacOsX/libSDL2.dylib'
                        into 'build/exe/fuuGBemu'
                    }
                }
                if (OperatingSystem.current().isWindows()) {
                    copy {
                        from 'lib/SDL2/Windows/x64/SDL2.dll'
                        into 'build/exe/fuuGBemu'
                    }
                }
            }
        }
    }
}