/*
    Gradle BuildScript for FuuGBemu
    C++ Gameboy (DMG) Emulator
    Author: Derek Boucher
*/

/*
    Packages
*/
import org.gradle.internal.os.OperatingSystem


/*
    Required Plugins For FuuGBemu
*/
plugins {
    id 'cpp'
    id 'objective-cpp'
    id 'cpp-unit-test'
}

/*
    Global Variables
 */
def sdl2Lib
def sdl2Include
def sdl2Dll

/*
    Determine Platform Specific Library Paths
 */
 sdl2Include = 'lib/sdl2/include'
 
if (OperatingSystem.current().isWindows()) {
    sdl2Lib = file(OperatingSystem.current().getStaticLibraryName('lib/sdl2/windows/x64/sdl2'))
    sdl2Dll = file(OperatingSystem.current().getSharedLibraryName('lib/sdl2/windows/x64/sdl2'))
}
if (OperatingSystem.current().isMacOsX()) {
    sdl2Lib = file(OperatingSystem.current().getSharedLibraryName('lib/sdl2/osx/sdl2'))
}

/*
    Model Block:
        This block defines the platform, architecture, compiler and linker arguments,
        the platform specific source sets and binary types.
*/
model {
    platforms {
        windows_x64 {
            architecture "x86_64"
            operatingSystem "windows"
        }
        macosx_x64 {
            architecture "x86_64"
            operatingSystem "macosx"
        }
    }
    repositories {
        libs(PrebuiltLibraries) {
            sdl2 {
                headers.srcDirs sdl2Include
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = sdl2Lib
                }
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = sdl2Lib
                }
            }
        }
    }
    components {
        FuuGBemu(NativeExecutableSpec) {
            sources {
                if (OperatingSystem.current().isMacOsX()) {
                    targetPlatform "macosx_x64"
                    objcpp {
                        source {
                            srcDirs "src/main/cpp", "src/main/osx"
                            include "**/*.mm", "**/*.m", "**/*.cpp"
                        }
                        exportedHeaders {
                            srcDirs "src/main/headers"
                            include "**/*.h", "**/*.hpp"
                        }
                        lib library: "sdl2", linkage: "shared"
                    }
                }
                if (OperatingSystem.current().isWindows()) {
                    targetPlatform "windows_x64"
                    cpp {
                        source {
                            srcDirs "src/main/cpp", "src/main/windows"
                            include "**/*.cpp"
                        }
                        exportedHeaders {
                            srcDirs "src/main/headers"
                            include "**/*.h", "**/*.hpp"
                        }
                        lib library: "sdl2", linkage: "shared"
                    }
                }
            }
            binaries.all {
                if(OperatingSystem.current().isMacOsX()) {
                    objcppCompiler.args "-DFUUGB_SYSTEM_MACOS",
                                        "-DFUUGB_DEBUG",
                                        "-g",
                                        "-Wall",
                                        "-std=c++11",
                                        "-stdlib=libc++",
                                        "-pthread",
                                        "-O3"

                    linker.args         "-framework",
                                        "Cocoa",
                                        "-framework",
                                        "AppKit",
                                        "-framework"
                }
                if(OperatingSystem.current().isWindows()) {
                    cppCompiler.args    "/FS",
                                        "/Zi",
                                        "/MTd",
                                        "/MP",
                                        "/DFUUGB_SYSTEM_WINDOWS",
                                        "/DUNICODE",
                                        "/D_UNICODE",
                                        "/DFUUGB_DEBUG",
                                        "/EHsc",
                                        "/Od"

                    linker.args         "/DEBUG",
                                        "comdlg32.lib",
                                        "user32.lib",
                                        "opengl32.lib"
                }
            }
            build {
                doLast {
                    if (OperatingSystem.current().isMacOsX()) {
                        copy {
                            from 'lib/sdl2/osx/libSDL2.dylib'
                            into 'build/exe/fuuGBemu'
                        }
                    }
                    if (OperatingSystem.current().isWindows()) {
                        copy {
                            from 'lib/sdl2/windows/x64/sdl2.dll'
                            into 'build/exe/fuuGBemu'
                        }
                    }
                }
            }
            unitTest {
                source {
                    from "src/main/cpp"
                    from "src/test/cpp"
                    from "src/test"
                }
                privateHeaders {
                    from "src/main/headers"
                    from "src/test/headers"
                }
            }
            compileTestCpp {
                includes.from(sdl2Include)
                compilerArgs.addAll toolChain.map { toolChain ->
                    if (toolChain in VisualCpp) {
                        return [
                            '/MT',
                            '/DFUUGB_SYSTEM_WINDOWS',
                            '/DUNICODE',
                            '/DFUUGB_UNIT_TEST'
                        ]
                    } else {
                        return [
                            '-x',
                            'objective-c++',
                            '-std=c++11',
                            '-Wall',
                            '-O3',
                            '-DFUUGB_SYSTEM_MACOS',
                            '-DFUUGB_UNIT_TEST'
                        ]
                    }
                }
            }
            linkTest {
                libs.from(sdl2Lib)
                linkerArgs.addAll toolChain.map { toolChain ->
                    if (toolChain in VisualCpp) {
                        return [
                            'comdlg32.lib',
                            'user32.lib'
                        ]
                    } else {
                        return [
                            '-framework',
                            'Cocoa',
                            '-framework',
                            'AppKit'
                        ]
                    }
                }
                doLast {
                    if (OperatingSystem.current().isMacOsX()) {
                        copy {
                            from 'lib/sdl2/osx/libSDL2.dylib'
                            into 'build/exe/test'
                        }
                    }
                    if (OperatingSystem.current().isWindows()) {
                        copy {
                            from 'lib/sdl2/windows/x64/sdl2.dll'
                            into 'build/exe/test'
                        }
                    }
                }
            }
            installTest {
                doLast {
                    if (OperatingSystem.current().isMacOsX()) {
                        copy {
                            from 'lib/sdl2/osx/libSDL2.dylib'
                            into 'build/install/test/lib'
                        }
                    }
                    if (OperatingSystem.current().isWindows()) {
                        copy {
                            from 'lib/sdl2/windows/x64/sdl2.dll'
                            into 'build/install/test/lib'
                        }
                    } 
                }
            }
        }
    }
}